name: 🚀 CI/CD Pipeline - AMORA Heartbeat

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  # ===== PHASE 1: Validation du code =====
  code-quality:
    name: 📋 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔍 ESLint check
        run: npm run lint
        
      - name: 🔧 TypeScript check
        run: npm run type-check
        
      - name: 🎨 Prettier check
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx}"

  # ===== PHASE 2: Tests unitaires =====
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🧪 Run unit tests
        run: npm run test:coverage
        
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
      - name: 💾 Store coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # ===== PHASE 3: Tests E2E =====
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps
        
      - name: 🔧 Setup test environment
        run: |
          # Créer les variables d'environnement pour les tests
          echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL_TEST }}" >> .env.test
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}" >> .env.test
          
      - name: 🚀 Build application
        run: npm run build
        
      - name: 🎭 Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          NODE_ENV: test
          
      - name: 📊 Upload E2E report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

  # ===== PHASE 4: Build et tests de performance =====
  build-and-performance:
    name: 🏗️ Build & Performance
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build:prod
        env:
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          VITE_APP_VERSION: ${{ github.sha }}
          
      - name: 📏 Bundle size check
        run: |
          # Vérifier la taille des bundles
          echo "📦 Bundle sizes:"
          du -sh dist/assets/*.js | head -10
          
          # Vérifier que le bundle principal < 500KB
          MAIN_SIZE=$(du -b dist/assets/index-*.js | cut -f1)
          if [ $MAIN_SIZE -gt 512000 ]; then
            echo "❌ Main bundle too large: $MAIN_SIZE bytes (max: 512KB)"
            exit 1
          fi
          echo "✅ Main bundle size OK: $MAIN_SIZE bytes"
          
      - name: ⚡ Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './.github/lighthouse/lighthouse.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: 💾 Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # ===== PHASE 5: Security audit =====
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔒 Run security audit
        run: |
          # Audit des vulnérabilités critiques et hautes
          npm audit --audit-level high
          
      - name: 🔍 Check for secrets
        uses: trufflesecurity/trufflehog@v3.63.2-beta
        with:
          path: ./
          base: main
          head: HEAD

  # ===== PHASE 6: Déploiement staging =====
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-performance, security-audit]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: 🌐 Deploy to Staging
        run: |
          # Déployement vers votre plateforme (Vercel, Netlify, etc.)
          echo "🚀 Deploying to staging environment..."
          # Exemple pour Vercel:
          # npx vercel --token ${{ secrets.VERCEL_TOKEN }} --prod
          
      - name: 🔔 Notify staging deployment
        run: |
          echo "✅ Staging deployment successful"
          echo "🌐 Staging URL: https://staging.amora.app"

  # ===== PHASE 7: Déploiement production =====
  deploy-production:
    name: 🏆 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-performance, security-audit]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: 🏆 Deploy to Production
        run: |
          echo "🚀 Deploying to production environment..."
          # Déployement production ici
          
      - name: 📈 Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ github.sha }}
          
      - name: 🎉 Success notification
        run: |
          echo "🎉 Production deployment successful!"
          echo "🌍 Production URL: https://amora.app"
