#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üßπ Nettoyage des fichiers signup-form dupliqu√©s...');

// Fichiers √† supprimer
const filesToDelete = [
  'src/components/ui/signup-form-optimized.tsx',
  'src/components/ui/signup-form-fixed.tsx',
  'src/components/ui/signup-form-backup.tsx'
];

// Fichier √† garder
const keepFile = 'src/components/ui/signup-form.tsx';

console.log('\nÔøΩÔøΩ Plan de nettoyage:');
console.log(`‚úÖ GARDER: ${keepFile}`);
filesToDelete.forEach(file => {
  console.log(`‚ùå SUPPRIMER: ${file}`);
});

// V√©rifier que le fichier principal existe
if (!fs.existsSync(keepFile)) {
  console.error(`‚ùå ERREUR: Le fichier principal ${keepFile} n'existe pas !`);
  process.exit(1);
}

console.log('\nüóëÔ∏è Suppression des fichiers dupliqu√©s...');

let deletedCount = 0;
filesToDelete.forEach(file => {
  if (fs.existsSync(file)) {
    try {
      fs.unlinkSync(file);
      console.log(`‚úÖ Supprim√©: ${file}`);
      deletedCount++;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la suppression de ${file}:`, error.message);
    }
  } else {
    console.log(`‚ö†Ô∏è Fichier d√©j√† supprim√©: ${file}`);
  }
});

console.log(`\nüéâ Nettoyage termin√© ! ${deletedCount} fichier(s) supprim√©(s).`);
console.log(`‚úÖ Fichier principal conserv√©: ${keepFile}`);

// V√©rification finale
console.log('\nüîç V√©rification finale:');
const remainingFiles = fs.readdirSync('src/components/ui/')
  .filter(file => file.includes('signup-form'));

if (remainingFiles.length === 1 && remainingFiles[0] === 'signup-form.tsx') {
  console.log('‚úÖ Parfait ! Un seul fichier signup-form.tsx reste.');
} else {
  console.log('‚ö†Ô∏è Fichiers restants:', remainingFiles);
}
