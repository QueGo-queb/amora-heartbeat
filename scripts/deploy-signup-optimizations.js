#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Obtenir le r√©pertoire courant pour les modules ES6
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ D√©ploiement des optimisations du formulaire d\'inscription...');

// 1. V√©rifier les pr√©requis
console.log('\nüìã V√©rification des pr√©requis:');

const requiredFiles = [
  'src/components/ui/country-multi-select.tsx',
  'src/components/ui/signup-form-optimized.tsx',
  'supabase/migrations/20250120000001_add_seeking_country_to_profiles.sql'
];

let allFilesExist = true;
requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
    allFilesExist = false;
  }
});

if (!allFilesExist) {
  console.log('\n‚ùå Certains fichiers requis sont manquants. Arr√™t du d√©ploiement.');
  process.exit(1);
}

// 2. Sauvegarder l'ancien formulaire
console.log('\n Sauvegarde de l\'ancien formulaire...');
const oldFormPath = 'src/components/ui/signup-form.tsx';
const backupPath = 'src/components/ui/signup-form-backup.tsx';

if (fs.existsSync(oldFormPath)) {
  fs.copyFileSync(oldFormPath, backupPath);
  console.log(`‚úÖ Ancien formulaire sauvegard√© dans ${backupPath}`);
} else {
  console.log('‚ö†Ô∏è Ancien formulaire non trouv√©, cr√©ation d\'un nouveau');
}

// 3. Installer le nouveau formulaire
console.log('\n Installation du nouveau formulaire...');
const newFormPath = 'src/components/ui/signup-form-optimized.tsx';
const targetPath = 'src/components/ui/signup-form.tsx';

fs.copyFileSync(newFormPath, targetPath);
console.log('‚úÖ Nouveau formulaire install√©');

// 4. Cr√©er le composant de test
console.log('\nüß™ Cr√©ation du composant de test...');
const testComponentPath = 'src/components/test/SignupFormTest.tsx';
const testComponentDir = path.dirname(testComponentPath);

if (!fs.existsSync(testComponentDir)) {
  fs.mkdirSync(testComponentDir, { recursive: true });
}

// Contenu du composant de test
const testComponentContent = `/**
 * ‚úÖ COMPOSANT DE TEST POUR LE FORMULAIRE D'INSCRIPTION OPTIMIS√â
 */

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { SignupFormOptimized } from '@/components/ui/signup-form-optimized';
import { CountryMultiSelect } from '@/components/ui/country-multi-select';
import { Badge } from '@/components/ui/badge';

export function SignupFormTest() {
  const [showForm, setShowForm] = useState(false);
  const [testCountries, setTestCountries] = useState<string[]>([]);
  const [testResults, setTestResults] = useState<string[]>([]);

  const runTests = () => {
    const results: string[] = [];
    
    // Test 1: V√©rifier que le composant CountryMultiSelect fonctionne
    try {
      results.push('‚úÖ Test 1: Composant CountryMultiSelect charg√©');
    } catch (error) {
      results.push('‚ùå Test 1: Erreur avec CountryMultiSelect');
    }
    
    // Test 2: V√©rifier la s√©lection de pays
    if (testCountries.length > 0) {
      results.push(\`‚úÖ Test 2: \${testCountries.length} pays s√©lectionn√©s\`);
    } else {
      results.push('‚ö†Ô∏è Test 2: Aucun pays s√©lectionn√©');
    }
    
    // Test 3: V√©rifier que l'Argentine est dans la liste
    if (testCountries.includes('AR')) {
      results.push('‚úÖ Test 3: Argentine trouv√©e dans la s√©lection');
    } else {
      results.push('‚ö†Ô∏è Test 3: Argentine non s√©lectionn√©e');
    }
    
    setTestResults(results);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-4xl mx-auto space-y-8">
        <Card>
          <CardHeader>
            <CardTitle>üß™ Test du Formulaire d'Inscription Optimis√©</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Test du composant CountryMultiSelect */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Test du Composant CountryMultiSelect</h3>
              <CountryMultiSelect
                selectedCountries={testCountries}
                onCountriesChange={setTestCountries}
                placeholder="Testez la s√©lection de pays..."
                maxSelections={5}
              />
              
              {testCountries.length > 0 && (
                <div className="space-y-2">
                  <p className="text-sm font-medium">Pays s√©lectionn√©s:</p>
                  <div className="flex flex-wrap gap-2">
                    {testCountries.map(country => (
                      <Badge key={country} variant="secondary">
                        {country}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Boutons de test */}
            <div className="flex gap-4">
              <Button onClick={runTests} variant="outline">
                üß™ Lancer les Tests
              </Button>
              <Button 
                onClick={() => setShowForm(!showForm)}
                className="bg-pink-500 hover:bg-pink-600"
              >
                {showForm ? 'Masquer' : 'Afficher'} le Formulaire Complet
              </Button>
            </div>

            {/* R√©sultats des tests */}
            {testResults.length > 0 && (
              <div className="space-y-2">
                <h3 className="text-lg font-semibold">R√©sultats des Tests:</h3>
                <div className="space-y-1">
                  {testResults.map((result, index) => (
                    <p key={index} className="text-sm">{result}</p>
                  ))}
                </div>
              </div>
            )}

            {/* Instructions */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <h3 className="font-semibold text-blue-900 mb-2"> Instructions de Test:</h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>1. Testez la s√©lection de pays ci-dessus</li>
                <li>2. V√©rifiez que l'Argentine est disponible</li>
                <li>3. Testez la recherche de pays</li>
                <li>4. V√©rifiez la limite de s√©lection</li>
                <li>5. Affichez le formulaire complet pour un test end-to-end</li>
              </ul>
            </div>
          </CardContent>
        </Card>

        {/* Formulaire complet */}
        {showForm && (
          <Card>
            <CardHeader>
              <CardTitle>üìù Formulaire d'Inscription Complet</CardTitle>
            </CardHeader>
            <CardContent>
              <SignupFormOptimized language="fr" />
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}`;

fs.writeFileSync(testComponentPath, testComponentContent);
console.log('‚úÖ Composant de test cr√©√©');

// 5. Mettre √† jour le package.json avec les nouveaux scripts
console.log('\nüì¶ Mise √† jour des scripts...');
try {
  const packageJsonPath = 'package.json';
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  // Ajouter les nouveaux scripts
  packageJson.scripts = {
    ...packageJson.scripts,
    'test:signup': 'node scripts/test-signup-form.js',
    'test:database': 'node scripts/test-database-migration.js',
    'deploy:signup': 'node scripts/deploy-signup-optimizations.js'
  };
  
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ Scripts ajout√©s au package.json');
} catch (error) {
  console.log('‚ö†Ô∏è Erreur lors de la mise √† jour du package.json:', error.message);
}

// 6. Cr√©er un fichier de documentation
console.log('\nüìö Cr√©ation de la documentation...');
const documentation = `# üöÄ Optimisations du Formulaire d'Inscription AMORA

## ‚úÖ Am√©liorations Apport√©es

### 1. **Composant de S√©lection Multi-Pays Optimis√©**
- Interface mobile-friendly avec recherche
- S√©lection multiple avec limite configurable
- Argentine ajout√©e √† la liste des pays
- Filtrage par r√©gion et recherche textuelle
- Gestion des erreurs am√©lior√©e

### 2. **Formulaire d'Inscription Optimis√©**
- Validation en temps r√©el avec debouncing
- Gestion d'erreur compl√®te et informative
- Sauvegarde des pays cibl√©s en base de donn√©es
- Performance optimis√©e avec useMemo et useCallback
- UX am√©lior√©e avec barre de progression

### 3. **Base de Donn√©es**
- Nouvelle colonne \`seeking_country\` dans la table \`profiles\`
- Index GIN pour optimiser les requ√™tes
- Migration SQL pr√™te √† d√©ployer

## Tests Disponibles

\`\`\`bash
# Tester le formulaire
npm run test:signup

# Tester la migration de base de donn√©es
npm run test:database

# D√©ployer les optimisations
npm run deploy:signup
\`\`\`

## Fichiers Modifi√©s/Cr√©√©s

- \`src/components/ui/country-multi-select.tsx\` - Nouveau composant
- \`src/components/ui/signup-form-optimized.tsx\` - Formulaire optimis√©
- \`supabase/migrations/20250120000001_add_seeking_country_to_profiles.sql\` - Migration
- \`src/components/test/SignupFormTest.tsx\` - Composant de test

## üöÄ Prochaines √âtapes

1. **Ex√©cuter la migration de base de donn√©es**
   \`\`\`bash
   supabase db push
   \`\`\`

2. **Tester l'inscription compl√®te**
   - Ouvrir l'application
   - Aller sur la page d'inscription
   - Tester la s√©lection de pays
   - V√©rifier la sauvegarde

3. **V√©rifier les donn√©es**
   - Se connecter √† Supabase
   - V√©rifier que la colonne \`seeking_country\` existe
   - Tester une inscription et v√©rifier les donn√©es

## üîß Configuration

Le composant \`CountryMultiSelect\` accepte les props suivantes:
- \`selectedCountries\`: Array de codes de pays
- \`onCountriesChange\`: Fonction de callback
- \`placeholder\`: Texte d'aide
- \`maxSelections\`: Limite de s√©lection (d√©faut: 10)

## üì± Optimisations Mobile

- Interface responsive
- Recherche tactile optimis√©e
- S√©lection par tap/click
- Affichage des drapeaux pour l'identification visuelle
- Limite de s√©lection pour √©viter la surcharge

## üéØ Pays Disponibles

La liste inclut tous les pays cibl√©s par AMORA:
- Am√©rique du Nord: √âtats-Unis, Canada, Mexique
- Am√©rique du Sud: Argentine, Br√©sil, Chili, Colombie, P√©rou, Uruguay
- Cara√Øbes: Ha√Øti, R√©publique Dominicaine, Jama√Øque, Cuba
- Europe: France, Espagne, Belgique, Suisse, Italie, Allemagne
- Afrique: Congo, Cameroun, Alg√©rie, C√¥te d'Ivoire, S√©n√©gal, etc.
- Asie: Chine, Japon, Cor√©e du Sud, Inde
- Oc√©anie: Australie, Nouvelle-Z√©lande

## ‚ö†Ô∏è Notes Importantes

- L'ancien formulaire est sauvegard√© dans \`signup-form-backup.tsx\`
- La migration doit √™tre ex√©cut√©e avant de tester
- Les pays sont stock√©s comme codes ISO (ex: 'AR' pour Argentine)
- La validation emp√™che l'inscription sans pays cibl√©s
`;

fs.writeFileSync('SIGNUP_OPTIMIZATIONS.md', documentation);
console.log('‚úÖ Documentation cr√©√©e (SIGNUP_OPTIMIZATIONS.md)');

// 7. R√©sum√© final
console.log('\nüéâ D√©ploiement termin√© avec succ√®s !');
console.log('\n R√©sum√© des actions:');
console.log('‚úÖ Fichiers requis v√©rifi√©s');
console.log('‚úÖ Ancien formulaire sauvegard√©');
console.log('‚úÖ Nouveau formulaire install√©');
console.log('‚úÖ Composant de test cr√©√©');
console.log('‚úÖ Scripts ajout√©s au package.json');
console.log('‚úÖ Documentation cr√©√©e');

console.log('\n Prochaines √©tapes:');
console.log('1. Ex√©cuter: npm run test:signup');
console.log('2. Ex√©cuter la migration de base de donn√©es');
console.log('3. Tester l\'inscription compl√®te');
console.log('4. V√©rifier la sauvegarde des pays cibl√©s');

console.log('\n‚ú® Formulaire d\'inscription optimis√© pr√™t √† l\'emploi !');
